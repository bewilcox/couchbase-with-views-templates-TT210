## Link fields = fields not in Primary Key and used as FK in selected Links    
###set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder($SRC)};

import $entity.fullName ;
import ${ROOT_PKG}.persistence.services.dao.common.DocumentPersistence;
import ${ROOT_PKG}.persistence.db.DatabaseConnectionProvider;

#set($showImportsForLinks = 0)
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#if($link.isFetchDEFAULT() || $link.isFetchLAZY())
#set($showImportsForLinks = 1)
#end
#end
#end
#if($showImportsForLinks == 1)
import java.util.Collection;
import java.util.Properties;
import ${ROOT_PKG}.persistence.services.dao.common.QueryParameters;
#end


/**
 * Service  implementation for basic persistence operations ( entity "${entity.name}" )
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${entity.name}Persistence extends DocumentPersistence<${entity.name}> {

#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#if($link.isFetchDEFAULT() || $link.isFetchLAZY())
	// View name for search by $link.formatedName(0)
	public static final String BY_$link.formatedName(0).toUpperCase()_QUERY_NAME = "${entity.name}s_by_$link.formatedName(0)";
#end
#end
#end

	/**
	 * Constructor
	 */
	public ${entity.name}Persistence(DatabaseConnectionProvider provider) {
		super(provider);
	}

	/**
	 * Get the id for the document. (Best pratice is entityName:id)
	 */
	@Override
	public String getDocumentID(${entity.name} entity) {
		return entity.getClass().getSimpleName()  
#foreach( $field in $entity.keyAttributes )
#if ( $field.getter )  
			+ ":" + entity.${field.getter}()#end

#end		;
	}


#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#if($link.isFetchDEFAULT() || $link.isFetchLAZY())
	/**
	 * Return all ${entity.name}s for the given $link.formatedName(0) id.
	 * @param id
	 * @return
	 */
	public Collection<${entity.name}> get${entity.name}sBy${link.javaTypeShort}(String id) {
		Properties properties = new Properties();
		properties.put(QueryParameters.CRITERION, id);
		properties.put(QueryParameters.INCLUDE_DOCS, true);
		return this.findByQueryName(BY_$link.formatedName(0).toUpperCase()_QUERY_NAME, properties);
	}
#end
#end
#end

}
